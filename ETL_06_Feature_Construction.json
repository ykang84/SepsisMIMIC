{"paragraphs":[{"text":"// Load Necessary Data including sepsis label\n\nval raw_input = spark.read.option(\"header\",true).option(\"inferSchema\", true).csv(\"file:///mnt/host/home/jbzhang/mimic/ETL_04_output.csv\")\n","user":"anonymous","dateUpdated":"2018-12-08T21:08:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{"0":{"graph":{"mode":"table","height":92.8,"optionOpen":false}}},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"raw_input: org.apache.spark.sql.DataFrame = [SUBJECT_ID: int, HADM_ID: int ... 16 more fields]\n"}]},"apps":[],"jobName":"paragraph_1544239717476_-745564982","id":"20181206-182126_547038650","dateCreated":"2018-12-08T03:28:37+0000","dateStarted":"2018-12-08T21:08:12+0000","dateFinished":"2018-12-08T21:08:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1182"},{"text":"val data_alltime = raw_input.selectExpr(\"SUBJECT_ID\", \"HADM_ID\", \"VALUE\", \"ITEMID\", \"event_hours\", \"cast (culture_hours as integer) culture_hours\", \"sepsis\")\ndata_alltime.printSchema()\n\ndata_alltime.where($\"sepsis\" === 1).agg(min(\"culture_hours\"), max(\"culture_hours\")).show()\ndata_alltime.where($\"sepsis\" === 0).agg(min(\"event_hours\"), max(\"event_hours\")).show()\n\n// for sepsis = 1, if culture_hours < 7 or >500, change to sepsis = 0\nval data_input = data_alltime.withColumn(\"sepsis\", when($\"culture_hours\" < 7 || $\"culture_hours\" > 500, 0).otherwise($\"sepsis\"))\ndata_input.where($\"sepsis\" === 1).agg(min(\"culture_hours\"), max(\"culture_hours\")).show()\n\n","user":"anonymous","dateUpdated":"2018-12-08T21:09:22+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"data_alltime: org.apache.spark.sql.DataFrame = [SUBJECT_ID: int, HADM_ID: int ... 5 more fields]\nroot\n |-- SUBJECT_ID: integer (nullable = true)\n |-- HADM_ID: integer (nullable = true)\n |-- VALUE: double (nullable = true)\n |-- ITEMID: string (nullable = true)\n |-- event_hours: integer (nullable = true)\n |-- culture_hours: integer (nullable = true)\n |-- sepsis: integer (nullable = true)\n\n+------------------+------------------+\n|min(culture_hours)|max(culture_hours)|\n+------------------+------------------+\n|            -99999|              1501|\n+------------------+------------------+\n\n+----------------+----------------+\n|min(event_hours)|max(event_hours)|\n+----------------+----------------+\n|             -61|            1471|\n+----------------+----------------+\n\ndata_input: org.apache.spark.sql.DataFrame = [SUBJECT_ID: int, HADM_ID: int ... 5 more fields]\n+------------------+------------------+\n|min(culture_hours)|max(culture_hours)|\n+------------------+------------------+\n|                 7|               496|\n+------------------+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1544239717484_-748642973","id":"20181206-203702_376832821","dateCreated":"2018-12-08T03:28:37+0000","dateStarted":"2018-12-08T21:09:22+0000","dateFinished":"2018-12-08T21:09:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1183"},{"text":"// drop all the measurements after 500 hours\nval data_input_pre500 = data_input.filter($\"event_hours\" <= 500)\ndata_input_pre500.count()\ndata_input_pre500.where($\"sepsis\" === 0).agg(min(\"event_hours\"), max(\"event_hours\")).show()\n\n// for sepsis = 1, drop all measurments after sepsis \nval data_input_pre500_preSepsis = data_input_pre500.filter(!($\"sepsis\" === 1 && ($\"event_hours\" > $\"culture_hours\")))\ndata_input_pre500_preSepsis.count()\n\ndata_input_pre500_preSepsis.filter($\"sepsis\" === 1).head(10)","user":"anonymous","dateUpdated":"2018-12-08T21:09:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"data_input_pre500: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SUBJECT_ID: int, HADM_ID: int ... 5 more fields]\nres10: Long = 3989731\n+----------------+----------------+\n|min(event_hours)|max(event_hours)|\n+----------------+----------------+\n|             -61|             500|\n+----------------+----------------+\n\ndata_input_pre500_preSepsis: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SUBJECT_ID: int, HADM_ID: int ... 5 more fields]\nres14: Long = 3989731\nres16: Array[org.apache.spark.sql.Row] = Array([32447,135968,0.53,QTc,372,377,1], [45576,128632,0.44,QTc,283,295,1], [65164,126778,0.36,QTc,137,186,1], [75424,171695,0.43,QTc,102,235,1], [77067,140990,0.39,QTc,197,266,1], [77067,140990,0.34,QTc,209,266,1], [77067,140990,0.38,QTc,241,266,1], [79562,178104,0.4,QTc,105,316,1], [79562,178104,0.44,QTc,101,316,1], [91648,125521,0.4,QTc,97,149,1])\n"}]},"apps":[],"jobName":"paragraph_1544250093784_-1742906784","id":"20181208-062133_2127967237","dateCreated":"2018-12-08T06:21:33+0000","dateStarted":"2018-12-08T21:09:39+0000","dateFinished":"2018-12-08T21:10:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1184"},{"text":"// filter the data for various hours perceding sepsis; for non-sepsis, take x hours before the last inputs: if 4hours, non-sepsis patient will use the data of 4hrs before the last input.\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\n\ndef nHousrPercedeSepsis(h: Integer, df:DataFrame) = {\n    // get the hour measurements for sepsis\n    val data_sepsis_h = df.filter($\"sepsis\" === 1 && $\"event_hours\" === ($\"culture_hours\" - h))\n    \n    //get the hour measurment for non-sepsis\n    val data_nonSepsis = df.filter($\"sepsis\" === 0)\n\n    val data_nonSepsis_MaxEventHour = data_nonSepsis.groupBy(\"SUBJECT_ID\", \"HADM_ID\").agg(max(\"event_hours\"))\n\n    val data_nonSepsis_withMaxEvent = data_nonSepsis.join(data_nonSepsis_MaxEventHour, Seq(\"SUBJECT_ID\", \"HADM_ID\"))\n    \n    val data_nonSepsis_h = data_nonSepsis_withMaxEvent.filter($\"event_hours\" === ($\"max(event_hours)\" - h)).drop(\"max(event_hours)\")\n    \n    val final_data = data_sepsis_h.union(data_nonSepsis_h)\n    \n    final_data\n}\n\n\n// val final_0 = nHousrPercedeSepsis(7, data_input_pre500_preSepsis)\n\n// final_0.filter($\"sepsis\" === 1).head(10)\n// final_0.filter($\"sepsis\" === 0).head(10)","user":"anonymous","dateUpdated":"2018-12-08T21:10:19+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nnHousrPercedeSepsis: (h: Integer, df: org.apache.spark.sql.DataFrame)org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\n"}]},"apps":[],"jobName":"paragraph_1544239717488_-737870004","id":"20181206-210730_1766455063","dateCreated":"2018-12-08T03:28:37+0000","dateStarted":"2018-12-08T21:10:19+0000","dateFinished":"2018-12-08T21:10:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1185"},{"text":"// val dataset = final_0.select(\"SUBJECT_ID\", \"HADM_ID\", \"ITEMID\", \"VALUE\")\n// val final_table = dataset.groupBy(\"SUBJECT_ID\", \"HADM_ID\").pivot(\"ITEMID\").avg(\"VALUE\")\n\n// val dataset_label = final_0.select(\"SUBJECT_ID\", \"HADM_ID\", \"sepsis\").distinct\n\n// val final_x_y = dataset_label.join(final_table, Seq(\"SUBJECT_ID\", \"HADM_ID\"))\n\n// //check whether the record is unique\n// final_x_y.count()\n// final_x_y.select(\"SUBJECT_ID\", \"HADM_ID\").distinct.count()\n// final_x_y.columns.foreach(println)\n\n// final_x_y.head(5)","user":"anonymous","dateUpdated":"2018-12-08T16:44:59+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dataset: org.apache.spark.sql.DataFrame = [SUBJECT_ID: int, HADM_ID: int ... 2 more fields]\nfinal_table: org.apache.spark.sql.DataFrame = [SUBJECT_ID: int, HADM_ID: int ... 67 more fields]\ndataset_label: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SUBJECT_ID: int, HADM_ID: int ... 1 more field]\nfinal_x_y: org.apache.spark.sql.DataFrame = [SUBJECT_ID: int, HADM_ID: int ... 68 more fields]\n"}]},"apps":[],"jobName":"paragraph_1544239717488_-737870004","id":"20181206-190256_725208022","dateCreated":"2018-12-08T03:28:37+0000","dateStarted":"2018-12-08T16:06:54+0000","dateFinished":"2018-12-08T16:08:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1186"},{"text":"// add antiboitics   not necessary\n// val other_feature = raw_input.select(\"SUBJECT_ID\", \"HADM_ID\", \"antibiotics_prescribed\", \"organ_failure\", \"respiratory\", \n//                                     \"cardiovascular\", \"renal\", \"hepatic\", \"hematologic\", \"metabolic\", \"neurologic\").distinct\n\n// val extend_x_y = final_x_y.join(other_feature, Seq(\"SUBJECT_ID\", \"HADM_ID\"))\n\n//check whether the record is unique\n// extend_x_y.count()\n// extend_x_y.select(\"SUBJECT_ID\", \"HADM_ID\").distinct.count()\n// extend_x_y.columns.foreach(println)\n\n// extend_x_y.head(5)","user":"anonymous","dateUpdated":"2018-12-08T16:44:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"other_feature: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [SUBJECT_ID: int, HADM_ID: int ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1544239717489_-738254753","id":"20181206-210911_194295809","dateCreated":"2018-12-08T03:28:37+0000","dateStarted":"2018-12-08T16:07:40+0000","dateFinished":"2018-12-08T16:08:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1187"},{"text":"def save_csv(h: Int) = {\n    val final_h = nHousrPercedeSepsis(h, data_input_pre500_preSepsis)\n    \n    val dataset = final_h.select(\"SUBJECT_ID\", \"HADM_ID\", \"ITEMID\", \"VALUE\")\n    val final_x = dataset.groupBy(\"SUBJECT_ID\", \"HADM_ID\").pivot(\"ITEMID\").avg(\"VALUE\")\n    \n    val final_y = final_h.select(\"SUBJECT_ID\", \"HADM_ID\", \"sepsis\").distinct\n    \n    val final_x_y = final_x.join(final_y, Seq(\"SUBJECT_ID\", \"HADM_ID\"))\n    \n    val final_x_y_noNull = final_x_y.na.fill(0.0, final_x_y.columns)\n    \n    final_x_y_noNull.count()\n    final_x_y_noNull.select(\"SUBJECT_ID\", \"HADM_ID\").distinct.count()\n    \n    final_x_y_noNull.coalesce(1)\n       .write.format(\"com.databricks.spark.csv\")\n       .option(\"header\", \"true\")\n       .save(\"file:///mnt/host/home/jbzhang/mimic/H\" + h.toString )\n    }\n\n// get the data for 0-5hours perceding sepsis\nsave_csv(0)\nsave_csv(1)\nsave_csv(2)\nsave_csv(3)\nsave_csv(4)\nsave_csv(5)\nsave_csv(24)","user":"anonymous","dateUpdated":"2018-12-09T23:36:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"save_csv: (h: Int)Unit\n"}]},"apps":[],"jobName":"paragraph_1544239717495_-739024251","id":"20181206-160305_1462461597","dateCreated":"2018-12-08T03:28:37+0000","dateStarted":"2018-12-08T21:11:32+0000","dateFinished":"2018-12-08T21:15:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1188"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544282534839_-342917510","id":"20181208-152214_1604473737","dateCreated":"2018-12-08T15:22:14+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:1191"}],"name":"Feature_Construction_ETL_04","id":"2DXMQH73H","angularObjects":{"2DWJPGHZA:shared_process":[],"2DVR773UW:shared_process":[],"2DWY3W4BC:shared_process":[],"2DXNSM5FD:shared_process":[],"2DWBW7TQZ:shared_process":[],"2DW7V31XM:shared_process":[],"2DV1ZWPEV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}